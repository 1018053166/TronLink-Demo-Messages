{"version":3,"sources":["components/Message/index.js","components/Featured/index.js","components/TronLinkGuide/index.js","utils/index.js","components/App/index.js","index.js","components/TronLinkGuide/TronLinkLogo.png","assets/banner.png"],"names":["Message","props","_props$message","message","owner","timestamp","tips","messageID","featured","tippable","requiresTronLink","onTip","react_default","a","createElement","className","onClick","lib","style","width","height","marginBottom","autoHide","moment","fromNow","count","amount","toLocaleString","Featured","recent","currentAddress","tronLinkInstalled","messages","sort","b","map","components_Message","key","WEBSTORE_URL","logo","src","TronLinkLogo","alt","openTronLink","window","open","TronLinkGuide","_props$installed","installed","href","target","rel","contract","utils","tronWeb","setTronWeb","this","abi","address","transformMessage","tippers","toNumber","fromHex","creator","time","fetchMessages","_fetchMessages","Object","asyncToGenerator","regenerator_default","mark","_callee","i","totalMessages","min","messageIDs","_this","_args","arguments","wrap","_context","prev","next","length","undefined","topPosts","call","sent","abrupt","push","current","Math","max","toConsumableArray","Set","Array","fill","_","index","concat","Promise","all","then","forEach","stop","apply","fetchMessage","_fetchMessage","_callee2","_ref","_ref$recent","_ref$featured","vulnerable","_context2","keys","filter","includes","splice","_x","_x2","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","loggedIn","currentMessage","loading","onMessageEdit","bind","assertThisInitialized","onMessageSend","onMessageTip","resolve","tronWebState","ready","_this2","setState","tries","timer","setInterval","TronWeb","clearInterval","defaultAddress","hex","toHex","base58","on","Utils","startEventListener","_this3","MessagePosted","watch","err","result","console","error","log","id","value","_ref3","_this4","_this$state$currentMe","trim","postMessage","send","shouldPollResponse","callValue","res","Swal","title","type","catch","hasOwnProperty","text","confirmButtonText","input","showCancelButton","showLoaderOnConfirm","reverseButtons","allowOutsideClick","isLoading","allowEscapeKey","preConfirm","isNaN","showValidationMessage","tipMessage","Number","placeholder","onChange","components_TronLinkGuide","_this5","_this$state$messages","entries","_ref5","_ref6","slicedToArray","banner","renderMessageInput","components_Featured","React","Component","ReactDOM","render","components_App","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9b4f3d9c.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\n\nimport { Scrollbars } from 'react-custom-scrollbars';\n\nimport './Message.scss';\n\nconst Message = props => {\n    const {\n        message: {\n            message,\n            owner,\n            timestamp,\n            tips\n        },\n        messageID,\n        featured,\n        tippable,\n        requiresTronLink,\n        onTip\n    } = props;\n\n    return (\n        <div className='message-wrapper'>\n            <div className={ 'message' + (tippable ? ' tippable' : '') + (requiresTronLink ? ' requiresTronLink' : '') } onClick={ () => onTip(messageID) }>\n                <div className='header'>\n                    <div className='owner'>\n                        { owner }\n                    </div>\n                    { featured && <div className='star'>\n                        &#9733;\n                    </div> }\n                </div>\n                <Scrollbars style={{ width: 330, height: 85, marginBottom: 6 }} autoHide>\n                    <div className='body'>\n                        { message }\n                    </div>\n                </Scrollbars>\n                <div className='footer'>\n                    <div className='timestamp'>\n                        { moment(timestamp * 1000).fromNow() }\n                    </div>\n                    { tips.count ? <div className='tips'>\n                        <strong>{ (tips.amount / 1000000).toLocaleString() } TRX</strong> from { tips.count.toLocaleString() } tip{ tips.count === 1 ? '' : 's' }\n                    </div> : '' }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Message;","import React from 'react';\nimport Message from 'components/Message';\n\nimport { Scrollbars } from 'react-custom-scrollbars';\n\nimport './Featured.scss';\n\nconst Featured = props => {\n    const {\n        recent,\n        featured,\n        currentAddress,\n        tronLinkInstalled,\n        onTip\n    } = props;\n\n    const messages = featured.sort((a, b) => recent[b].tips.amount - recent[a].tips.amount).map(messageID => (\n        <Message\n            message={ recent[messageID] }\n            featured={ true }\n            key={ messageID }\n            messageID={ messageID }\n            tippable={ recent[messageID].owner !== currentAddress }\n            requiresTronLink={ !tronLinkInstalled }\n            onTip={ onTip } />\n    ));\n\n    return (\n        <div className='featured'>\n            <Scrollbars style={{ height: 220, width: '100%' }} autoHide>\n                <div className='scrollable'>\n                    { messages }\n                </div>\n            </Scrollbars>            \n        </div>\n    );\n};\n\nexport default Featured;","import React from 'react';\n\nimport TronLinkLogo from './TronLinkLogo.png';\nimport './TronLinkGuide.scss';\n\nconst WEBSTORE_URL = 'https://chrome.google.com/webstore/detail/ibnejdfjmmkpcnlpebklmnkoeoihofec/';\n\nconst logo = (\n    <div className='logo'>\n        <img src={ TronLinkLogo } alt='TronLink logo' />\n    </div>\n);\n\nconst openTronLink = () => {\n    window.open(WEBSTORE_URL, '_blank');\n};\n\nconst TronLinkGuide = props => {\n    const {\n        installed = false\n    } = props;\n\n    if(!installed) {\n        return (\n            <div className='tronLink' onClick={ openTronLink }>\n                <div className='info'>\n                    <h1>TronLink Required</h1>\n                    <p>\n                        To create a post or tip others you must install TronLink. TronLink is a TRON wallet for the browser\n                        that can be <a href={ WEBSTORE_URL } target='_blank' rel='noopener noreferrer'>installed from the Chrome Webstore</a>.\n                        Once installed, return back and refresh the page.\n                    </p>\n                </div>\n                { logo }\n            </div>\n        );\n    }\n\n    return (\n        <div className='tronLink hover' onClick={ openTronLink }>\n            <div className='info'>\n                <h1>Log in Required</h1>\n                <p>\n                    TronLink is installed but you must first log in. Open TronLink from the browser bar and set up your\n                    first wallet or decrypt a previously-created wallet.\n                </p>\n            </div>\n            { logo }\n        </div>\n    );\n};\n\nexport default TronLinkGuide;","import contracts from 'config/contracts';\n\nconst contract = contracts['TRXMessages.sol:TRXMessages'];\n\nconst utils = {\n    tronWeb: false,\n    contract: false,\n\n    setTronWeb(tronWeb) {\n        this.tronWeb = tronWeb;\n        this.contract = tronWeb.contract(contract.abi, contract.address)\n    },\n\n    transformMessage(message) {\n        return {\n            tips: {\n                amount: message.tips,\n                count: message.tippers.toNumber()\n            },\n            owner: this.tronWeb.address.fromHex(message.creator),\n            timestamp: message.time.toNumber(),\n            message: message.message\n        }\n    },\n\n    async fetchMessages(recent = {}, featured = []) {\n        // Try to fetch messageID's of top 20 tipped messages (or until there are no more)\n        for(let i = 0; i < 20; i++) {\n            const message = await this.contract.topPosts(i).call();\n\n            if(message.toNumber() === 0)\n                break; // End of tips array\n\n            featured.push(\n                message.toNumber()\n            );\n        }\n\n        // Fetch Max(30) most recent messages\n        const totalMessages = (await this.contract.current().call()).toNumber();\n        const min = Math.max(1, totalMessages - 30);\n\n        const messageIDs = [ ...new Set([\n            ...new Array(totalMessages - min).fill().map((_, index) => min + index),\n            ...featured\n        ])];\n\n        await Promise.all(messageIDs.map(messageID => (\n            this.contract.messages(messageID).call()\n        ))).then(messages => messages.forEach((message, index) => {\n            const messageID = +messageIDs[index];\n\n            recent[messageID] = this.transformMessage(message);\n        }));\n\n        return {\n            featured,\n            recent\n        };\n    },\n\n    async fetchMessage(messageID, { recent = {}, featured = [] }) {\n        const message = await this.contract.messages(messageID).call();\n        const vulnerable = Object.keys(recent).filter(messageID => (\n            !featured.includes(messageID)\n        )).sort((a, b) => (\n            recent[b].timestamp - recent[a].timestamp\n        ));\n\n        recent[messageID] = this.transformMessage(message);\n\n        if(vulnerable.length > 30) {\n            const removed = vulnerable.splice(0, vulnerable.length - 30);\n\n            removed.forEach(messageID => {\n                delete recent[messageID];\n            });\n        }\n\n        return {\n            message: recent[messageID],\n            recent,\n            featured\n        };\n    }\n};\n\nexport default utils;","import React from 'react';\nimport Message from 'components/Message';\nimport Featured from 'components/Featured';\nimport TronLinkGuide from 'components/TronLinkGuide';\nimport TronWeb from 'tronweb';\nimport Utils from 'utils';\nimport Swal from 'sweetalert2';\nimport banner from 'assets/banner.png';\n\nimport './App.scss';\n\nconst FOUNDATION_ADDRESS = 'TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg';\n\nclass App extends React.Component {\n    state = {\n        tronWeb: {\n            installed: false,\n            loggedIn: false\n        },\n        currentMessage: {\n            message: '',\n            loading: false\n        },\n        messages: {\n            recent: {},\n            featured: []\n        }\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.onMessageEdit = this.onMessageEdit.bind(this);\n        this.onMessageSend = this.onMessageSend.bind(this);\n        this.onMessageTip = this.onMessageTip.bind(this);\n    }\n\n    async componentDidMount() {\n        await new Promise(resolve => {\n            const tronWebState = {\n                installed: !!window.tronWeb,\n                loggedIn: window.tronWeb && window.tronWeb.ready\n            };\n\n            if(tronWebState.installed) {\n                this.setState({\n                    tronWeb:\n                    tronWebState\n                });\n\n                return resolve();\n            }\n\n            let tries = 0;\n\n            const timer = setInterval(() => {\n                if(tries >= 10) {\n                    const TRONGRID_API = 'https://api.trongrid.io';\n\n                    window.tronWeb = new TronWeb(\n                        TRONGRID_API,\n                        TRONGRID_API,\n                        TRONGRID_API\n                    );\n\n                    this.setState({\n                        tronWeb: {\n                            installed: false,\n                            loggedIn: false\n                        }\n                    });\n\n                    clearInterval(timer);\n                    return resolve();\n                }\n\n                tronWebState.installed = !!window.tronWeb;\n                tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n\n                if(!tronWebState.installed)\n                    return tries++;\n\n                this.setState({\n                    tronWeb: tronWebState\n                });\n\n                resolve();\n            }, 100);\n        });\n\n        if(!this.state.tronWeb.loggedIn) {\n            // Set default address (foundation address) used for contract calls\n            // Directly overwrites the address object as TronLink disabled the\n            // function call\n            window.tronWeb.defaultAddress = {\n                hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n                base58: FOUNDATION_ADDRESS\n            };\n\n            window.tronWeb.on('addressChanged', () => {\n                if(this.state.tronWeb.loggedIn)\n                    return;\n\n                this.setState({\n                    tronWeb: {\n                        installed: true,\n                        loggedIn: true\n                    }\n                });\n            });\n        }\n\n        Utils.setTronWeb(window.tronWeb);\n\n        this.startEventListener();\n        this.fetchMessages();\n    }\n\n    // Polls blockchain for smart contract events\n    startEventListener() {\n        Utils.contract.MessagePosted().watch((err, { result }) => {\n            if(err)\n                return console.error('Failed to bind event listener:', err);\n\n            console.log('Detected new message:', result.id);\n            this.fetchMessage(+result.id);\n        });\n\n        /*Utils.contract.MessageTipped().watch((err, { result }) => {\n            if(err)\n                return console.error('Failed to bind event listener:', err);\n\n            console.log('Message was tipped:', result.id);\n            this.fetchMessage(+result.id);\n        });\n\n        Utils.contract.MessageAddedToTopPosts().watch((err, { result }) => {\n            if(err)\n                return console.error('Failed to bind event listener:', err);\n\n            console.log('Message was added to featured posts:', result.id);\n            this.fetchMessage(+result.id);\n\n            const {\n                recent,\n                featured\n            } = this.state.messages;\n\n            if(featured.includes(+result.id))\n                return;\n\n            this.setState({\n                messages: {\n                    recent: this.state.messages.recent,\n                    featured: [ ...featured, +result.id ]\n                }\n            });\n        });\n\n        Utils.contract.MessageRemovedFromTopPosts().watch((err, { result }) => {\n            if(err)\n                return console.error('Failed to bind event listener:', err);\n\n            console.log('Message was removed from featured posts:', result.id);\n            this.fetchMessage(+result.id);\n\n            const {\n                recent,\n                featured\n            } = this.state.messages;\n\n            if(!featured.includes(+result.id))\n                return;\n\n            this.setState({\n                messages: {\n                    recent: this.state.messages.recent,\n                    featured: featured.filter(messageID => messageID !== +result.id)\n                }\n            });\n        });*/\n    }\n\n    async fetchMessages() {\n        this.setState({\n            messages: await Utils.fetchMessages()\n        });\n    }\n\n    async fetchMessage(messageID) {\n        const {\n            recent,\n            featured,\n            message\n        } = await Utils.fetchMessage(messageID, this.state.messages);\n\n        this.setState({\n            messages: {\n                recent,\n                featured\n            }\n        });\n\n        return message;\n    }\n\n    // Stores value of textarea to state\n    onMessageEdit({ target: { value } }) {\n        if(this.state.currentMessage.loading)\n            return;\n\n        this.setState({\n            currentMessage: {\n                message: value,\n                loading: false\n            }\n        });\n    }\n\n    // Submits message to the blockchain\n    onMessageSend() {\n        const {\n            loading,\n            message\n        } = this.state.currentMessage;\n\n        if(loading)\n            return;\n\n        if(!message.trim().length)\n            return;\n\n        this.setState({\n            currentMessage: {\n                loading: true,\n                message\n            }\n        });\n\n        Utils.contract.postMessage(message).send({\n            shouldPollResponse: true,\n            callValue: 0\n        }).then(res => Swal({\n            title: 'Post Created',\n            type: 'success'\n        })).catch(err => Swal({\n            title: 'Post Failed',\n            type: 'error'\n        })).then(() => {\n            this.setState({\n                currentMessage: {\n                    loading: false,\n                    message\n                }\n            });\n        });\n    }\n\n    // Tips a message with a specific amount\n    async onMessageTip(messageID) {\n        const messages = {\n            ...this.state.messages.recent,\n            ...this.state.messages.featured\n        };\n\n        if(!messages.hasOwnProperty(messageID))\n            return;\n\n        if(!this.state.tronWeb.loggedIn)\n            return;\n\n        if(messages[messageID].owner === Utils.tronWeb.defaultAddress.base58)\n            return;\n\n        const { value } = await Swal({\n            title: 'Tip Message',\n            text: 'Enter tip amount in TRX',\n            confirmButtonText: 'Tip',\n            input: 'text',\n            showCancelButton: true,\n            showLoaderOnConfirm: true,\n            reverseButtons: true,\n            allowOutsideClick: () => !Swal.isLoading(),\n            allowEscapeKey: () => !Swal.isLoading(),\n            preConfirm: amount => {\n                if(isNaN(amount) || amount <= 0) {\n                    Swal.showValidationMessage('Invalid tip amount provided');\n                    return false;\n                }\n\n                return Utils.contract.tipMessage(+messageID).send({\n                    callValue: Number(amount) * 1000000\n                }).then(() => true).catch(err => {\n                    Swal.showValidationMessage(err);\n                });\n            }\n        });\n\n        value && Swal({\n            title: 'Message Tipped',\n            type: 'success'\n        });\n    }\n\n    renderMessageInput() {\n        if(!this.state.tronWeb.installed)\n            return <TronLinkGuide />;\n\n        if(!this.state.tronWeb.loggedIn)\n            return <TronLinkGuide installed />;\n\n        return (\n            <div className={ 'messageInput' + (this.state.currentMessage.loading ? ' loading' : '') }>\n                <textarea\n                    placeholder='Enter your message to post'\n                    value={ this.state.currentMessage.message }\n                    onChange={ this.onMessageEdit }></textarea>\n                <div className='footer'>\n                    <div className='warning'>\n                        Posting a message will cost 1 TRX and network fees\n                    </div>\n                    <div\n                        className={ 'sendButton' + (!!this.state.currentMessage.message.trim().length ? '' : ' disabled') }\n                        onClick={ this.onMessageSend }\n                    >\n                        Post Message\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        const {\n            recent,\n            featured\n        } = this.state.messages;\n\n        const messages = Object.entries(recent).sort((a, b) => b[1].timestamp - a[1].timestamp).map(([ messageID, message ]) => (\n            <Message\n                message={ message }\n                featured={ featured.includes(+messageID) }\n                key={ messageID }\n                messageID={ messageID }\n                tippable={ message.owner !== Utils.tronWeb.defaultAddress.base58 }\n                requiresTronLink={ !this.state.tronWeb.installed }\n                onTip={ this.onMessageTip } />\n        ));\n\n        return (\n            <div className='kontainer'>\n                <div className='header white'>\n                    <a href='https://tronwatch.market' target='_blank' rel='noopener noreferrer'>\n                        <img className='banner' src={ banner } alt='TronWatch Market ICO' />\n                    </a>\n                    <p>\n                        <strong>Tron Message Board</strong> is a DApp which allows you to post messages\n                        along with tipping others or receiving tips. There is no additional cost associated\n                        when tipping people, however you do have to pay network fees.<br/><br/>\n\n                        Want to build your own DApp? The code to this demo is available on&nbsp;\n                        <a href='https://github.com/TronWatch/TronLink-Demo-Messages/' target='_blank' rel='noopener noreferrer'>\n                            GitHub\n                        </a>.\n                    </p>\n                </div>\n\n                { this.renderMessageInput() }\n\n                <div className='header'>\n                    <h1>Featured</h1>\n                    <span>The top 20 messages, sorted by the total tips</span>\n                </div>\n                <Featured\n                    recent={ recent }\n                    featured={ featured }\n                    currentAddress={ Utils.tronWeb && Utils.tronWeb.defaultAddress.base58 }\n                    tronLinkInstalled={ this.state.tronWeb.installed }\n                    onTip={ this.onMessageTip } />\n\n                <div className='header'>\n                    <h1>Recent</h1>\n                    <span>Click any message to send the user a tip</span>\n                </div>\n                <div className='messages'>\n                    { messages }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/TronLinkLogo.d3a8f115.png\";","module.exports = __webpack_public_path__ + \"static/media/banner.4c3553e3.png\";"],"sourceRoot":""}