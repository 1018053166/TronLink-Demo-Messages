{"version":3,"sources":["img/banner.png","components/Message/index.js","components/Featured/index.js","components/TronLinkGuide/index.js","utils/index.js","components/App/index.js","index.js","components/TronLinkGuide/TronLinkLogo.png"],"names":["module","exports","__webpack_require__","p","Message","props","_props$message","message","owner","timestamp","tips","messageID","featured","tippable","requiresTronLink","onTip","react_default","a","createElement","className","onClick","lib","style","width","height","marginBottom","autoHide","moment","fromNow","count","amount","toLocaleString","Featured","recent","currentAddress","tronLinkInstalled","messages","sort","b","map","components_Message","key","WEBSTORE_URL","logo","src","TronLinkLogo","alt","openTronLink","window","open","TronLinkGuide","_props$installed","installed","href","target","rel","contract","utils","tronWeb","setTronWeb","this","abi","address","transformMessage","tippers","toNumber","fromHex","creator","time","fetchMessages","_fetchMessages","Object","asyncToGenerator","regenerator_default","mark","_callee","i","totalMessages","min","messageIDs","_this","_args","arguments","wrap","_context","prev","next","length","undefined","topPosts","call","sent","abrupt","push","current","Math","max","toConsumableArray","Set","Array","fill","_","index","concat","Promise","all","then","forEach","stop","apply","fetchMessage","_fetchMessage","_callee2","_ref","_ref$recent","_ref$featured","vulnerable","_context2","keys","filter","includes","splice","_x","_x2","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","loggedIn","currentMessage","loading","onMessageEdit","bind","assertThisInitialized","onMessageSend","onMessageTip","resolve","tronWebState","ready","_this2","setState","tries","timer","setInterval","TRONGRID_API","TronWeb","clearInterval","defaultAddress","hex","toHex","base58","on","Utils","startEventListener","_this3","MessagePosted","watch","err","result","console","error","log","id","value","_ref3","_this4","_this$state$currentMe","trim","postMessage","send","shouldPollResponse","callValue","res","Swal","title","type","catch","hasOwnProperty","text","confirmButtonText","input","showCancelButton","showLoaderOnConfirm","reverseButtons","allowOutsideClick","isLoading","allowEscapeKey","preConfirm","isNaN","showValidationMessage","tipMessage","Number","placeholder","onChange","components_TronLinkGuide","_this5","_this$state$messages","entries","_ref5","_ref6","slicedToArray","require","renderMessageInput","components_Featured","React","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.da204bec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner.4c3553e3.png\";","import React from 'react';\r\nimport moment from 'moment';\r\n\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nimport './Message.scss';\r\n\r\nconst Message = props => {\r\n    const {\r\n        message: {\r\n            message,\r\n            owner,\r\n            timestamp,\r\n            tips\r\n        },\r\n        messageID,\r\n        featured,\r\n        tippable,\r\n        requiresTronLink,\r\n        onTip\r\n    } = props;\r\n\r\n    return (\r\n        <div className='message-wrapper'>\r\n            <div className={ 'message' + (tippable ? ' tippable' : '') + (requiresTronLink ? ' requiresTronLink' : '') } onClick={ () => onTip(messageID) }>\r\n                <div className='header'>\r\n                    <div className='owner'>\r\n                        { owner }\r\n                    </div>\r\n                    { featured && <div className='star'>\r\n                        &#9733;\r\n                    </div> }\r\n                </div>\r\n                <Scrollbars style={{ width: 330, height: 85, marginBottom: 6 }} autoHide>\r\n                    <div className='body'>\r\n                        { message }\r\n                    </div>\r\n                </Scrollbars>\r\n                <div className='footer'>\r\n                    <div className='timestamp'>\r\n                        { moment(timestamp * 1000).fromNow() }\r\n                    </div>\r\n                    { tips.count ? <div className='tips'>\r\n                        <strong>{ (tips.amount / 1000000).toLocaleString() } TRX</strong> from { tips.count.toLocaleString() } tip{ tips.count === 1 ? '' : 's' }\r\n                    </div> : '' }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Message;","import React from 'react';\r\nimport Message from 'components/Message';\r\n\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nimport './Featured.scss';\r\n\r\nconst Featured = props => {\r\n    const {\r\n        recent,\r\n        featured,\r\n        currentAddress,\r\n        tronLinkInstalled,\r\n        onTip\r\n    } = props;\r\n\r\n    const messages = featured.sort((a, b) => recent[b].tips.amount - recent[a].tips.amount).map(messageID => (\r\n        <Message\r\n            message={ recent[messageID] }\r\n            featured={ true }\r\n            key={ messageID }\r\n            messageID={ messageID }\r\n            tippable={ recent[messageID].owner !== currentAddress }\r\n            requiresTronLink={ !tronLinkInstalled }\r\n            onTip={ onTip } />\r\n    ));\r\n\r\n    return (\r\n        <div className='featured'>\r\n            <Scrollbars style={{ height: 220, width: '100%' }} autoHide>\r\n                <div className='scrollable'>\r\n                    { messages }\r\n                </div>\r\n            </Scrollbars>            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Featured;","import React from 'react';\r\n\r\nimport TronLinkLogo from './TronLinkLogo.png';\r\nimport './TronLinkGuide.scss';\r\n\r\nconst WEBSTORE_URL = 'https://chrome.google.com/webstore/detail/ibnejdfjmmkpcnlpebklmnkoeoihofec/';\r\n\r\nconst logo = (\r\n    <div className='logo'>\r\n        <img src={ TronLinkLogo } alt='TronLink logo' />\r\n    </div>\r\n);\r\n\r\nconst openTronLink = () => {\r\n    window.open(WEBSTORE_URL, '_blank');\r\n};\r\n\r\nconst TronLinkGuide = props => {\r\n    const {\r\n        installed = false\r\n    } = props;\r\n\r\n    if(!installed) {\r\n        return (\r\n            <div className='tronLink' onClick={ openTronLink }>\r\n                <div className='info'>\r\n                    <h1>TronLink Required</h1>\r\n                    <p>\r\n                        To create a post or tip others you must install TronLink. TronLink is a TRON wallet for the browser\r\n                        that can be <a href={ WEBSTORE_URL } target='_blank' rel='noopener noreferrer'>installed from the Chrome Webstore</a>.\r\n                        Once installed, return back and refresh the page.\r\n                    </p>\r\n                </div>\r\n                { logo }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className='tronLink hover' onClick={ openTronLink }>\r\n            <div className='info'>\r\n                <h1>Log in Required</h1>\r\n                <p>\r\n                    TronLink is installed but you must first log in. Open TronLink from the browser bar and set up your\r\n                    first wallet or decrypt a previously-created wallet.\r\n                </p>\r\n            </div>\r\n            { logo }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TronLinkGuide;","import contracts from 'config/contracts';\r\n\r\nconst contract = contracts['TRXMessages.sol:TRXMessages'];\r\n\r\nconst utils = {\r\n    tronWeb: false,\r\n    contract: false,\r\n\r\n    setTronWeb(tronWeb) {\r\n        this.tronWeb = tronWeb;\r\n        this.contract = tronWeb.contract(contract.abi, contract.address)\r\n    },\r\n\r\n    transformMessage(message) {\r\n        return {\r\n            tips: {\r\n                amount: message.tips,\r\n                count: message.tippers.toNumber()\r\n            },\r\n            owner: this.tronWeb.address.fromHex(message.creator),\r\n            timestamp: message.time.toNumber(),\r\n            message: message.message\r\n        }\r\n    },\r\n\r\n    async fetchMessages(recent = {}, featured = []) {\r\n        // Try to fetch messageID's of top 20 tipped messages (or until there are no more)\r\n        for(let i = 0; i < 20; i++) {\r\n            const message = await this.contract.topPosts(i).call();\r\n\r\n            if(message.toNumber() === 0)\r\n                break; // End of tips array\r\n\r\n            featured.push(\r\n                message.toNumber()\r\n            );\r\n        }\r\n\r\n        // Fetch Max(30) most recent messages\r\n        const totalMessages = (await this.contract.current().call()).toNumber();\r\n        const min = Math.max(1, totalMessages - 30);\r\n\r\n        const messageIDs = [ ...new Set([\r\n            ...new Array(totalMessages - min).fill().map((_, index) => min + index),\r\n            ...featured\r\n        ])];\r\n\r\n        await Promise.all(messageIDs.map(messageID => (\r\n            this.contract.messages(messageID).call()\r\n        ))).then(messages => messages.forEach((message, index) => {\r\n            const messageID = +messageIDs[index];\r\n\r\n            recent[messageID] = this.transformMessage(message);\r\n        }));\r\n\r\n        return {\r\n            featured,\r\n            recent\r\n        };\r\n    },\r\n\r\n    async fetchMessage(messageID, { recent = {}, featured = [] }) {\r\n        const message = await this.contract.messages(messageID).call();\r\n        const vulnerable = Object.keys(recent).filter(messageID => (\r\n            !featured.includes(messageID)\r\n        )).sort((a, b) => (\r\n            recent[b].timestamp - recent[a].timestamp\r\n        ));\r\n\r\n        recent[messageID] = this.transformMessage(message);\r\n\r\n        if(vulnerable.length > 30) {\r\n            const removed = vulnerable.splice(0, vulnerable.length - 30);\r\n\r\n            removed.forEach(messageID => {\r\n                delete recent[messageID];\r\n            });\r\n        }\r\n\r\n        return {\r\n            message: recent[messageID],\r\n            recent,\r\n            featured\r\n        };\r\n    }\r\n};\r\n\r\nexport default utils;","import React from 'react';\r\nimport Message from 'components/Message';\r\nimport Featured from 'components/Featured';\r\nimport TronLinkGuide from 'components/TronLinkGuide';\r\nimport TronWeb from 'tronweb';\r\nimport Utils from 'utils';\r\nimport Swal from 'sweetalert2';\r\n\r\nimport './App.scss';\r\n\r\nconst FOUNDATION_ADDRESS = 'TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg';\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        tronWeb: {\r\n            installed: false,\r\n            loggedIn: false\r\n        },\r\n        currentMessage: {\r\n            message: '',\r\n            loading: false\r\n        },\r\n        messages: {\r\n            recent: {},\r\n            featured: []\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onMessageEdit = this.onMessageEdit.bind(this);\r\n        this.onMessageSend = this.onMessageSend.bind(this);\r\n        this.onMessageTip = this.onMessageTip.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await new Promise(resolve => {\r\n            const tronWebState = {\r\n                installed: !!window.tronWeb,\r\n                loggedIn: window.tronWeb && window.tronWeb.ready\r\n            };\r\n\r\n            if(tronWebState.installed) {\r\n                this.setState({\r\n                    tronWeb:\r\n                    tronWebState\r\n                });\r\n\r\n                return resolve();\r\n            }\r\n\r\n            let tries = 0;\r\n\r\n            const timer = setInterval(() => {\r\n                if(tries >= 10) {\r\n                    const TRONGRID_API = 'https://api.shasta.trongrid.io';\r\n\r\n                    window.tronWeb = new TronWeb(\r\n                        TRONGRID_API,\r\n                        TRONGRID_API,\r\n                        TRONGRID_API\r\n                    );\r\n\r\n                    this.setState({\r\n                        tronWeb: {\r\n                            installed: false,\r\n                            loggedIn: false\r\n                        }\r\n                    });\r\n\r\n                    clearInterval(timer);\r\n                    return resolve();\r\n                }\r\n\r\n                tronWebState.installed = !!window.tronWeb;\r\n                tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\r\n\r\n                if(!tronWebState.installed)\r\n                    return tries++;\r\n\r\n                this.setState({\r\n                    tronWeb: tronWebState\r\n                });\r\n\r\n                resolve();\r\n            }, 100);\r\n        });\r\n\r\n        if(!this.state.tronWeb.loggedIn) {\r\n            // Set default address (foundation address) used for contract calls\r\n            // Directly overwrites the address object as TronLink disabled the\r\n            // function call\r\n            window.tronWeb.defaultAddress = {\r\n                hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\r\n                base58: FOUNDATION_ADDRESS\r\n            };\r\n\r\n            window.tronWeb.on('addressChanged', () => {\r\n                if(this.state.tronWeb.loggedIn)\r\n                    return;\r\n\r\n                this.setState({\r\n                    tronWeb: {\r\n                        installed: true,\r\n                        loggedIn: true\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        Utils.setTronWeb(window.tronWeb);\r\n\r\n        this.startEventListener();\r\n        this.fetchMessages();\r\n    }\r\n\r\n    // Polls blockchain for smart contract events\r\n    startEventListener() {\r\n        Utils.contract.MessagePosted().watch((err, { result }) => {\r\n            if(err)\r\n                return console.error('Failed to bind event listener:', err);\r\n\r\n            console.log('Detected new message:', result.id);\r\n            this.fetchMessage(+result.id);\r\n        });\r\n\r\n        /*Utils.contract.MessageTipped().watch((err, { result }) => {\r\n            if(err)\r\n                return console.error('Failed to bind event listener:', err);\r\n\r\n            console.log('Message was tipped:', result.id);\r\n            this.fetchMessage(+result.id);\r\n        });\r\n\r\n        Utils.contract.MessageAddedToTopPosts().watch((err, { result }) => {\r\n            if(err)\r\n                return console.error('Failed to bind event listener:', err);\r\n\r\n            console.log('Message was added to featured posts:', result.id);\r\n            this.fetchMessage(+result.id);\r\n\r\n            const {\r\n                recent,\r\n                featured\r\n            } = this.state.messages;\r\n\r\n            if(featured.includes(+result.id))\r\n                return;\r\n\r\n            this.setState({\r\n                messages: {\r\n                    recent: this.state.messages.recent,\r\n                    featured: [ ...featured, +result.id ]\r\n                }\r\n            });\r\n        });\r\n\r\n        Utils.contract.MessageRemovedFromTopPosts().watch((err, { result }) => {\r\n            if(err)\r\n                return console.error('Failed to bind event listener:', err);\r\n\r\n            console.log('Message was removed from featured posts:', result.id);\r\n            this.fetchMessage(+result.id);\r\n\r\n            const {\r\n                recent,\r\n                featured\r\n            } = this.state.messages;\r\n\r\n            if(!featured.includes(+result.id))\r\n                return;\r\n\r\n            this.setState({\r\n                messages: {\r\n                    recent: this.state.messages.recent,\r\n                    featured: featured.filter(messageID => messageID !== +result.id)\r\n                }\r\n            });\r\n        });*/\r\n    }\r\n\r\n    async fetchMessages() {\r\n        this.setState({\r\n            messages: await Utils.fetchMessages()\r\n        });\r\n    }\r\n\r\n    async fetchMessage(messageID) {\r\n        const {\r\n            recent,\r\n            featured,\r\n            message\r\n        } = await Utils.fetchMessage(messageID, this.state.messages);\r\n\r\n        this.setState({\r\n            messages: {\r\n                recent,\r\n                featured\r\n            }\r\n        });\r\n\r\n        return message;\r\n    }\r\n\r\n    // Stores value of textarea to state\r\n    onMessageEdit({ target: { value } }) {\r\n        if(this.state.currentMessage.loading)\r\n            return;\r\n\r\n        this.setState({\r\n            currentMessage: {\r\n                message: value,\r\n                loading: false\r\n            }\r\n        });\r\n    }\r\n\r\n    // Submits message to the blockchain\r\n    onMessageSend() {\r\n        const {\r\n            loading,\r\n            message\r\n        } = this.state.currentMessage;\r\n\r\n        if(loading)\r\n            return;\r\n\r\n        if(!message.trim().length)\r\n            return;\r\n\r\n        this.setState({\r\n            currentMessage: {\r\n                loading: true,\r\n                message\r\n            }\r\n        });\r\n\r\n        Utils.contract.postMessage(message).send({\r\n            shouldPollResponse: true,\r\n            callValue: 0\r\n        }).then(res => Swal({\r\n            title: 'Post Created',\r\n            type: 'success'\r\n        })).catch(err => Swal({\r\n            title: 'Post Failed',\r\n            type: 'error'\r\n        })).then(() => {\r\n            this.setState({\r\n                currentMessage: {\r\n                    loading: false,\r\n                    message\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Tips a message with a specific amount\r\n    async onMessageTip(messageID) {\r\n        const messages = {\r\n            ...this.state.messages.recent,\r\n            ...this.state.messages.featured\r\n        };\r\n\r\n        if(!messages.hasOwnProperty(messageID))\r\n            return;\r\n\r\n        if(!this.state.tronWeb.loggedIn)\r\n            return;\r\n\r\n        if(messages[messageID].owner === Utils.tronWeb.defaultAddress.base58)\r\n            return;\r\n\r\n        const { value } = await Swal({\r\n            title: 'Tip Message',\r\n            text: 'Enter tip amount in TRX',\r\n            confirmButtonText: 'Tip',\r\n            input: 'text',\r\n            showCancelButton: true,\r\n            showLoaderOnConfirm: true,\r\n            reverseButtons: true,\r\n            allowOutsideClick: () => !Swal.isLoading(),\r\n            allowEscapeKey: () => !Swal.isLoading(),\r\n            preConfirm: amount => {\r\n                if(isNaN(amount) || amount <= 0) {\r\n                    Swal.showValidationMessage('Invalid tip amount provided');\r\n                    return false;\r\n                }\r\n\r\n                return Utils.contract.tipMessage(+messageID).send({\r\n                    callValue: Number(amount) * 1000000\r\n                }).then(() => true).catch(err => {\r\n                    Swal.showValidationMessage(err);\r\n                });\r\n            }\r\n        });\r\n\r\n        value && Swal({\r\n            title: 'Message Tipped',\r\n            type: 'success'\r\n        });\r\n    }\r\n\r\n    renderMessageInput() {\r\n        if(!this.state.tronWeb.installed)\r\n            return <TronLinkGuide />;\r\n\r\n        if(!this.state.tronWeb.loggedIn)\r\n            return <TronLinkGuide installed />;\r\n\r\n        return (\r\n            <div className={ 'messageInput' + (this.state.currentMessage.loading ? ' loading' : '') }>\r\n                <textarea\r\n                    placeholder='Enter your message to post'\r\n                    value={ this.state.currentMessage.message }\r\n                    onChange={ this.onMessageEdit }></textarea>\r\n                <div className='footer'>\r\n                    <div className='warning'>\r\n                        Posting a message will cost 1 TRX and network fees\r\n                    </div>\r\n                    <div\r\n                        className={ 'sendButton' + (!!this.state.currentMessage.message.trim().length ? '' : ' disabled') }\r\n                        onClick={ this.onMessageSend }\r\n                    >\r\n                        Post Message\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            recent,\r\n            featured\r\n        } = this.state.messages;\r\n\r\n        const messages = Object.entries(recent).sort((a, b) => b[1].timestamp - a[1].timestamp).map(([ messageID, message ]) => (\r\n            <Message\r\n                message={ message }\r\n                featured={ featured.includes(+messageID) }\r\n                key={ messageID }\r\n                messageID={ messageID }\r\n                tippable={ message.owner !== Utils.tronWeb.defaultAddress.base58 }\r\n                requiresTronLink={ !this.state.tronWeb.installed }\r\n                onTip={ this.onMessageTip } />\r\n        ));\r\n\r\n        return (\r\n            <div className='kontainer'>\r\n                <div className='header'>\r\n                    <a href='https://tronwatch.market' target='_blank'><img className='banner' src={require('../../img/banner.png')} /></a>\r\n                </div>\r\n                <div className='header'>\r\n                    <p>\r\n                        This DApp allows you to post messages along with tipping others or receiving tips.<br/>\r\n                        We don't take any fee on this, the only cost are TRON transaction fees and the amount you tip.<br/>\r\n                        Want to build your own DApp? The code to this demo is available on <a target='_blank' href='https://github.com/TronWatch/TronLink-Demo-Messages/'>GitHub</a>\r\n                    </p>\r\n                </div>\r\n\r\n                { this.renderMessageInput() }\r\n\r\n                <div className='header'>\r\n                    <h1>Featured</h1>\r\n                    <span>The top 20 messages, sorted by the total tips</span>\r\n                </div>\r\n                <Featured\r\n                    recent={ recent }\r\n                    featured={ featured }\r\n                    currentAddress={ Utils.tronWeb && Utils.tronWeb.defaultAddress.base58 }\r\n                    tronLinkInstalled={ this.state.tronWeb.installed }\r\n                    onTip={ this.onMessageTip } />\r\n\r\n                <div className='header'>\r\n                    <h1>Recent</h1>\r\n                    <span>Click any message to send the user a tip</span>\r\n                </div>\r\n                <div className='messages'>\r\n                    { messages }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","module.exports = __webpack_public_path__ + \"static/media/TronLinkLogo.d3a8f115.png\";"],"sourceRoot":""}